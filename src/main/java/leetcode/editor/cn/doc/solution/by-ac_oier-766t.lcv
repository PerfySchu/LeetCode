## 贪心

根据题意，我们可以先对 `nums` 进行排序（升序），然后从后往前开始选择，当首次满足「选择元素之和 严格大于 未选择元素之和」时，必然满足所选元素个数最少，若存在其他同样个数的合法方案，也满足所选方案为元素和最大方案，同时满足答案输出按照非升序要求。

代码：

* []

```Java
class Solution {
    public List<Integer> minSubsequence(int[] nums) {
        Arrays.sort(nums);
        int sum = 0, cur = 0, idx = nums.length - 1;
        for (int i : nums) sum += i;
        List<Integer> ans = new ArrayList<>();
        while (cur <= sum) {
            sum -= nums[idx];
            cur += nums[idx];
            ans.add(nums[idx--]);
        }
        return ans;
    }
}
```

* []

```TypeScript
function minSubsequence(nums: number[]): number[] {
    nums = nums.sort((a,b)=>a-b)
    let sum = 0, cur = 0, idx = nums.length - 1
    for (const i of nums) sum += i
    const ans = new Array<number>()
    while (cur <= sum) {
        sum -= nums[idx]
        cur += nums[idx]
        ans.push(nums[idx--])
    }
    return ans
};
```

* 时间复杂度：$O(n\log{n})$
* 空间复杂度：$O(\log{n})$

---

## 加餐

**题太简单？加餐一道面试题 : [【综合笔试题】难度 4.5/5，超超超经典数学运用题](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247492714&idx=1&sn=1d416234453fd2f9c3b68ee10f7a7926)🎉🎉**

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
