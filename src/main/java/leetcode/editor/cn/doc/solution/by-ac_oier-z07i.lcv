## DFS

为了方便，我们令 `expression` 为 `s`。

数据范围为 $20$，且要统计所有的计算结果，我们可以运用 `DFS` 爆搜所有方案。

给定的 `s` 只有数字和运算符，我们可以根据运算符将式子分为左右两部分，设计递归函数 `List<Integer> dfs(int l, int r)`，含义为搜索子串 $s[l...r]$ 的所有运算结果。

最终答案为 `dfs(0,n-1)`，其中 $n$ 为入参字符串的长度，同时我们有显而易见的递归出口：当给定的 $s[l...r]$ 不包含任何运算符时，搜索结果为 $s[l...r]$ 所代表的数字本身。

考虑如何对任意 $s[l...r]$ 进行计算：我们可以通过枚举 $s[l...r]$ 范围内的所有的运算符位置来进行爆搜，假设当前枚举到的 $s[i]$ 为运算符，我们可以递归运算符的左边 `dfs(l,i-1)` 拿到左边所有的结果，递归运算符右边 `dfs(i+1,r)` 拿到右边的所有结果，结合「乘法原理」即可知道以当前运算符 $s[i]$ 为分割点的表达式的所有方案。

不难发现，上述过程都是由「小表达式」的结果推导出「大表达式」的结果，因此也可以运用「区间 DP」方式进行求解，复杂度与 `DFS` 一致。

代码：

* []

```Java
class Solution {
    char[] cs;
    public List<Integer> diffWaysToCompute(String s) {
        cs = s.toCharArray();
        return dfs(0, cs.length - 1);
    }
    List<Integer> dfs(int l, int r) {
        List<Integer> ans = new ArrayList<>();
        for (int i = l; i <= r; i++) {
            if (cs[i] >= '0' && cs[i] <= '9') continue;
            List<Integer> l1 = dfs(l, i - 1), l2 = dfs(i + 1, r);
            for (int a : l1) {
                for (int b : l2) {
                    int cur = 0;
                    if (cs[i] == '+') cur = a + b;
                    else if (cs[i] == '-') cur = a - b;
                    else cur = a * b;
                    ans.add(cur);
                }
            }
        }
        if (ans.isEmpty()) {
            int cur = 0;
            for (int i = l; i <= r; i++) cur = cur * 10 + (cs[i] - '0');
            ans.add(cur);
        }
        return ans;
    }
}
```

* 时间复杂度：复杂度与最终结果数相关，最终结果数为「卡特兰数」，复杂度为 $O(C_{n})$
* 空间复杂度：复杂度与最终结果数相关，最终结果数为「卡特兰数」，复杂度为 $O(C_{n})$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
