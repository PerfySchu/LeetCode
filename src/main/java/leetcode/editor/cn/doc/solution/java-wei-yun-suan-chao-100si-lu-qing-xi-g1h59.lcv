### 解题思路

我们知道**异或运算`^`是不进位的加法**，因此要实现加法的第一步就是先用异或运算`^`进行不进位加法

然后我们再去实现**进位操作**。

进位的产生条件为: **二进制位都为1时会产生进位**。很容易想到与运算`&`：二进制位都为1时结果才为1。
因此我们可以选择用与运算`&`保存我们的进位操作。

**当我们知道进位操作发生在哪些位置后，应该让`&`的结果左移一位达到进位的目的**

然后继续判断是否还需要进位

当与运算`&`的运算结果为0时,说明没有任何一位需要进位操作就结束,返回结果。
**图解：**
![QQ图片20210601142621.jpg](https://pic.leetcode-cn.com/1622528793-dWUDxg-QQ%E5%9B%BE%E7%89%8720210601142621.jpg)

### 代码

* java

```java
class Solution {
    public int add(int a, int b) {
        int m = a ^ b; //不进位加法
        int n = (a & b) << 1; //进位
        while (n != 0) {
            int temp = n ^ m;
            n = (m & n) << 1;
            m = temp;
        }
        return m;
    }
}
```

