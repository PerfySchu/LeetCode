## 递归

设计递归函数 `int dfs(TreeNode root)`，含义为传入根节点 `root`，返回以该节点为起点，往下走同值路径所能经过的最大路径长度（即不能同时往左右节点走），同时使用全局变量 `max` 记录答案路径所能经过最大路径长度。

在递归函数内部，先通过递归 `root` 的左右子节点，拿到以 `root.left` 和 `root.right` 为起点的最大路径长度 `l` 和 `r`，然后根据当前节点值和左右子节点值的相等关系来更新 `ans`，同时用 `cur` 维护「以当前节点 `root` 为目标路径中深度最小（位置最高）节点时」所经过的最大路径长度。

代码：

* []

```Java
class Solution {
    int max = 0;
    public int longestUnivaluePath(TreeNode root) {
        dfs(root);
        return max;
    }
    int dfs(TreeNode root) {
        if (root == null) return 0;
        int ans = 0, cur = 0, l = dfs(root.left), r = dfs(root.right);
        if (root.left != null && root.left.val == root.val) {
            ans = l + 1; cur += l + 1;
        }
        if (root.right != null && root.right.val == root.val) {
            ans = Math.max(ans, r + 1); cur += r + 1;
        }
        max = Math.max(max, cur);
        return ans;
    }
}
```

* []

```TypeScript
let max = 0;
function longestUnivaluePath(root: TreeNode | null): number {
    max = 0
    dfs(root)
    return max
};
function dfs(root: TreeNode | null): number {
    if (root == null) return 0
    let ans = 0, cur = 0, l = dfs(root.left), r = dfs(root.right)
    if (root.left != null && root.left.val == root.val) {
        ans = l + 1; cur += l + 1
    }
    if (root.right != null && root.right.val == root.val) {
        ans = Math.max(ans, r + 1); cur += r + 1
    }
    max = Math.max(max, cur)
    return ans
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：忽略递归带来的额外空间开销，复杂度为 $O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
