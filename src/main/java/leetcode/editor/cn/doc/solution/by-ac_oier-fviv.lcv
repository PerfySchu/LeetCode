## 模拟（计数 + 分情况讨论）

我们使用 `cnt` 数组记录每个数的出现次数（即 `cnt[i] = x` 含义为数值 $i$ 的出现次数为 $x$ 次），以及使用 `sum` 来记录出现次数为某个值的数有多少个（即 `sum[i] = x` 含义为出现次数为 $i$ 的数值共有 $x$ 个），同时使用 `max` 来记录最大出现次数 $cnt[i]$。

从前往后处理 `nums`，假设当前处理到的数值为 $t = nums[i]$（前缀所含数量为 $len = i + 1$）有如下几种情况，我们可以更新最大长度 `ans`：

* $max = 1$：说明当前处理到的所有 $nums[i]$ 均只出现了一次，此时任意删除一个均满足要求；
* $max \times sum[max] + 1 = len$：说明有一个数值单独出现了一次（其余出现次数为 `max` 的数值 + 被删除的一个数 = 总数量 $len$），删除后即满足要求；
* $(max - 1) \times (sum[max - 1] + 1) + 1 = len$：说明出现次数为 `max` 的数值只有一个，其余出现次数均为 `max - 1`，对其删除一次后即满足要求（删除该出现次数为 `max` 的数值后，会导致出现次数为 `max - 1` 的数值多一个，此时有「出现次数为 `max - 1` 的数值 + 被删除的一个数 = 总数量 $len$」）。

代码：

* []

```Java
class Solution {
    static int[] cnt = new int[100010], sum = new int[100010];
    public int maxEqualFreq(int[] nums) {
        Arrays.fill(cnt, 0); Arrays.fill(sum, 0);
        int n = nums.length, max = 0, ans = 0;
        for (int i = 0; i < n; i++) {
            int t = nums[i], cur = ++cnt[t], len = i + 1;
            sum[cur]++; sum[cur - 1]--;
            max = Math.max(max, cur);
            if (max == 1) ans = len;
            if (max * sum[max] + 1 == len) ans = len;
            if ((max - 1) * (sum[max - 1] + 1) + 1 == len) ans = len;
        }
        return ans;
    }
}
```

* []

```TypeScript
function maxEqualFreq(nums: number[]): number {
    let n = nums.length, max = 0, ans = 0
    const cnt = new Array<number>(100010).fill(0), sum = new Array<number>(100010).fill(0)
    for (let i = 0; i < n; i++) {
        let t = nums[i], len = i + 1, cur = ++cnt[t]
        sum[cur]++; sum[cur - 1]--;
        max = Math.max(max, cur)
        if (max == 1) ans = len
        if (max * sum[max] + 1 == len) ans = len
        if ((max - 1) * (sum[max - 1] + 1) + 1 == len) ans = len
    }
    return ans
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
