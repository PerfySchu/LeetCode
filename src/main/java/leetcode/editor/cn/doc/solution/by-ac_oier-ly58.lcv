## DFS + 哈希表

设计递归函数 `String dfs(TreeNode root)`，含义为返回以传入参数 `root` 为根节点的子树所对应的指纹标识。

对于标识的设计只需使用 `"_"` 分割不同的节点值，同时对空节点进行保留（定义为空串 `" "`）即可。

使用哈希表记录每个标识（子树）出现次数，当出现次数为 $2$（首次判定为重复出现）时，将该节点加入答案。

代码：

* []

```Java
class Solution {
    Map<String, Integer> map = new HashMap<>();
    List<TreeNode> ans = new ArrayList<>();
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        dfs(root);
        return ans;
    }
    String dfs(TreeNode root) {
        if (root == null) return " ";
        StringBuilder sb = new StringBuilder();
        sb.append(root.val).append("_");
        sb.append(dfs(root.left)).append(dfs(root.right));
        String key = sb.toString();
        map.put(key, map.getOrDefault(key, 0) + 1);
        if (map.get(key) == 2) ans.add(root);
        return key;
    }
}
```

* []

```Typescript
let ans: Array<TreeNode>
let map: Map<string, number>
function findDuplicateSubtrees(root: TreeNode | null): Array<TreeNode | null> {
    ans = new Array<TreeNode>()
    map = new Map<string, number>()
    dfs(root)
    return ans
};
function dfs(root: TreeNode | null): string {
    if (root == null) return " "
    let key = root.val + "_"
    key += dfs(root.left)
    key += dfs(root.right)
    if (!map.has(key)) map.set(key, 1)
    else map.set(key, map.get(key) + 1)
    if (map.get(key) == 2) ans.push(root)
    return key
}
```

* 时间复杂度：`DFS` 过程复杂度为 $O(n)$，对于每个子树需要构造出与子树同等规模的字符串，复杂度为 $O(n)$。整体复杂度为 $O(n^2)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
