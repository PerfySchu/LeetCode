## 模拟

为了方便，我们令 `equation` 为 `s`。

由于运算符只有 `+` 和 `-`，因此无须考虑运算优先级，可在遍历过程中进行计算。

使用变量 `x` 和 `num` 分别代指当前运算结果中 $x$ 的系数以及数值部分，从前往后处理 `s` 的每个字符，根据字符类型进行分情况讨论，假设当前处理到的数值为 $s[i]$：

* 若 $s[i] =$ `+/-`：此时影响的是下一个运算数值的正负，修改对应的 `op` 标识；
* 若 $s[i] =$ `数值`：此时将完整的运算值进行取出（运算值可能是关于 $x$ 的描述，可能是纯数值），假设连续段 $s[i:j - 1]$ 之间为当前运算值，根据 $s[j - 1]$ 是否为字符 `x` 可知，是要将 $s[i:j - 2]$ 的数值累加到变量 `x`，还是将 $s[i:j - 1]$ 的数值累加到变量 `num`；
* 若 $s[i] =$ `=`：此时代表方程的左边已处理完，将变量 `x` 和 `num` 进行翻转（含义为将左边的运算结果移项到右边），并继续往后处理。

当整个字符串 `s` 处理完后，我们得到最终关于 $x$ 的系数 `x`，以及数值大小 `num`。

根据 `x` 是否为 $0$ 可知答案：

* 若 `x` 为 $0$：此时根据 `num` 是否为 $0$ 可知是 `Infinite solutions`（对应 `num` 为 $0$） 还是 `No solution`（对应 `num` 不为 $0$）
* 若 `x` 不为 $0$：对 `x` 和 `num` 进行约分后，返回对应答案。

代码：

* []

```Java
class Solution {
    public String solveEquation(String s) {
        int x = 0, num = 0, n = s.length();
        char[] cs = s.toCharArray();
        for (int i = 0, op = 1; i < n; ) {
            if (cs[i] == '+') {
                op = 1; i++;
            } else if (cs[i] == '-') {
                op = -1; i++;
            } else if (cs[i] == '=') {
                x *= -1; num *= -1; op = 1; i++;
            } else {
                int j = i;
                while (j < n && cs[j] != '+' && cs[j] != '-' && cs[j] != '=') j++;
                if (cs[j - 1] == 'x') x += (i < j - 1 ? Integer.parseInt(s.substring(i, j - 1)) : 1) * op;
                else num += Integer.parseInt(s.substring(i, j)) * op;
                i = j;
            }
        }
        if (x == 0) return num == 0 ? "Infinite solutions" : "No solution";    
        else return "x=" + (num / -x);
    }
}
```

* []

```TypeScript
function solveEquation(s: string): string {
    let x = 0, num = 0, n = s.length
    for (let i = 0, op = 1; i < n; ) {
        if (s[i] == '+') {
            op = 1; i++;
        } else if (s[i] == '-') {
            op = -1; i++
        } else if (s[i] == '=') {
            x *= -1; num *= -1; op = 1; i++;
        } else {
            let j = i
            while (j < n && s[j] != '+' && s[j] != '-' && s[j] != '=') j++
            if (s[j - 1] == 'x') x += (i < j - 1 ? Number(s.substring(i, j - 1)) : 1) * op
            else num += Number(s.substring(i, j)) * op
            i = j
        }
    }
    if (x == 0) return num == 0 ? "Infinite solutions" : "No solution"    
    else return "x=" + (num / -x)
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：使用 `charAt` 替换 `toCharArray`。复杂度为 $O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
