## 模拟

根据题意进行模拟即可。

对 `arr` 进行拷贝操作得到新数组 `clone`，对 `clone` 数组进行排序，再使用哈希表记录元素与序号的映射关系，最后根据映射关系构造答案。

代码：

* []

```Java
class Solution {
    public int[] arrayRankTransform(int[] arr) {
        int[] clone = arr.clone();
        Arrays.sort(clone);
        Map<Integer, Integer> map = new HashMap<>();
        int n = arr.length, idx = 0;
        for (int i : clone) {
            if (!map.containsKey(i)) map.put(i, ++idx);
        }
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) ans[i] = map.get(arr[i]);
        return ans;
    }
}
```

* []

```TypeScript
function arrayRankTransform(arr: number[]): number[] {
    let clone = [...arr]
    clone.sort((a,b)=>a-b)
    let n = arr.length, idx = 0
    let map = new Map<number, number>()
    for (const i of clone) {
        if (!map.has(i)) map.set(i, ++idx)
    }
    let ans = new Array<number>()
    for (let i = 0; i < n; i++) ans.push(map.get(arr[i]))
    return ans
};
```

* 时间复杂度：$O(n\log{n})$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
