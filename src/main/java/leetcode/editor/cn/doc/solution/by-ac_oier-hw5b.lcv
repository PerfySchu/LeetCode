## 模拟

数据范围为 $10^3$，可直接模拟。

代码：

* []

```Java
class Solution {
    public int[] finalPrices(int[] ps) {
        int n = ps.length;
        int[] ans = new int[n];
        for (int i = 0; i < n; i++) {
            int k = 0;
            for (int j = i + 1; j < n && k == 0; j++) {
                if (ps[j] <= ps[i]) k = ps[j];
            }
            ans[i] = ps[i] - k;
        }
        return ans;
    }
}
```

* []

```Typescript
function finalPrices(ps: number[]): number[] {
    const n = ps.length
    const ans = new Array<number>(n).fill(0)
    for (let i = 0; i < n; i++) {
        let k = 0
        for (let j = i + 1; j < n && k == 0; j++) {
            if (ps[j] <= ps[i]) k = ps[j]
        }
        ans[i] = ps[i] - k
    }
    return ans
};
```

* 时间复杂度：$O(n^2)$
* 空间复杂度：$O(n)$

---

## 单调栈

根据题意，我们知道若 $nums[i]$ 存在折扣，必然是被其右边最近一个满足「$nums[j] <= nums[i]$」的 $nums[j]$ 所更新。反过来说，给定一个 $nums[j]$，其所能更新的是其左边最近一个满足「$nums[i] >= nums[j]$」的 $nums[i]$。

因此我们可以使用「单调栈」来进行求解。

当然，我们也能不依靠经验，而从问题的本身出发，逐步分析出该做法。

具体的，我们可以从前往后处理所有的 $nums[i]$，使用某类容器装载我们所有的「待打折」的商品下标。假设当前处理到的是 $nums[i]$：
* 若其比容器内的任意商品价格要高，其必然不能更新任何一个待打折商品的价格，将其也加入容器尾部（此时我们发现，若有一个新的商品加入容器，其必然是当前所有待打折商品中的价格最高的，即容器内的商品价格单调递增）；
* 若其价格不高于容器内的商品价格，其能够更新容器内待打折的商品价格，并且由于我们容器满足单调递增特性，我们必然能够从尾部开始取出待打折商品来进行更新，直到处理完成或遇到第一个无法更新价格的商品。

由于我们需要往尾部添加和取出元素，因此容器可使用「栈」。

**至此，我们分析了单调栈做法的两大重点：为何单调 & 为何用栈。若对「单调栈」仍不了解的同学，可以看前置 🧀 : [关于 RMQ 的若干解法](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247493262&idx=1&sn=2d8e192a5767b49b9a13a6192ab3b833) 中的第四种解法 🎉🎉🎉。**

代码：

* []

```Java
class Solution {
    public int[] finalPrices(int[] ps) {
        int n = ps.length;
        int[] ans = new int[n];
        Deque<Integer> d = new ArrayDeque<>();
        for (int i = 0; i < n; i++) {
            while (!d.isEmpty() && ps[d.peekLast()] >= ps[i]) {
                int idx = d.pollLast();
                ans[idx] = ps[idx] - ps[i];
            }
            d.addLast(i); ans[i] = ps[i];
        }
        return ans;
    }
}
```

* []

```TypeScript
function finalPrices(ps: number[]): number[] {
    let n = ps.length, he = 0, ta = 0
    const ans = new Array<number>(n).fill(0)
    const stk = new Array<number>(n).fill(0)
    for (let i = 0; i < n; i++) {
        while (he < ta && ps[stk[ta - 1]] >= ps[i]) {
            const idx = stk[--ta]
            ans[idx] = ps[idx] - ps[i]
        }
        stk[ta++] = i; ans[i] = ps[i]
    }
    return ans
};
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
