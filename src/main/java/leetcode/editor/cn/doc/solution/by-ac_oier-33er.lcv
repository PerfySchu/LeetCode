## DFS

根据满二叉树的节点编号规则：若根节点编号为 `u`，则其左子节点编号为 `u << 1`，其右节点编号为 `u << 1 | 1`。

一个朴素的想法是：我们在 `DFS`过程中使用两个哈希表分别记录每层深度中的最小节点编号和最大节点编号，两者距离即是当前层的宽度，最终所有层数中的最大宽度即是答案。

而实现上，我们可以利用先 `DFS` 左节点，再 `DFS` 右节点的性质可知，每层的最左节点必然是最先被遍历到，因此我们只需要记录当前层最先被遍历到点编号（即当前层最小节点编号），并在 `DFS` 过程中计算宽度，更新答案即可。

> 看到评论区有同学讨论关于编号溢出问题，之所以溢出仍能 `AC` 是因为测试数组中没有同层内「宽度」左端点不溢出，右端点溢出，同时该层就是最大宽度的数据点。
> 我们可以通过 `u = u - map.get(depth) + 1` 操作来对同层内的节点进行重新编号（使得同层最靠左的非空节点编号为 $1$）。
> 通过重编号操作 我们可以消除由于深度加深带来的编号溢出问题，同时 `TS` 代码不再需要使用 `bigint`。

代码：

* []

```Java
class Solution {
    Map<Integer, Integer> map = new HashMap<>();
    int ans;
    public int widthOfBinaryTree(TreeNode root) {
        dfs(root, 1, 0);
        return ans;
    }
    void dfs(TreeNode root, int u, int depth) {
        if (root == null) return ;
        if (!map.containsKey(depth)) map.put(depth, u);
        ans = Math.max(ans, u - map.get(depth) + 1);
        u = u - map.get(depth) + 1;
        dfs(root.left, u << 1, depth + 1);
        dfs(root.right, u << 1 | 1, depth + 1);
    }
}
```

* []

```TypeScript
let map = new Map<number, number>()
let ans = 0
function widthOfBinaryTree(root: TreeNode | null): number {
    map.clear()
    ans = 0
    dfs(root, 1, 0)
    return ans
};
function dfs(root: TreeNode | null, u: number, depth: number): void {
    if (root == null) return 
    if (!map.has(depth)) map.set(depth, u)
    ans = Math.max(ans, u - map.get(depth) + 1)
    u = u - map.get(depth) + 1
    dfs(root.left, u << 1, depth + 1)
    dfs(root.right, u << 1 | 1, depth + 1)
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(n)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
