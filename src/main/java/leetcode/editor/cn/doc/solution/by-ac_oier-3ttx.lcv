## 分情况讨论

记灯泡数量为 $n$（至少为 $1$），翻转次数为 $k$（至少为 $0$），使用 `1` 代表灯亮，使用 `0` 代表灯灭。

我们根据 $n$ 和 $k$ 的数值分情况讨论：

* 当 $k = 0$ 时，无论 $n$ 为何值，都只有起始（全 `1`）一种状态；
* 当 $k > 0$ 时，根据 $n$ 进一步分情况讨论：
  * 当 $n = 1$ 时，若 $k$ 为满足「$k > 0$」的最小值 $1$ 时，能够取满「`1`/`0`」两种情况，而其余更大 $k$ 值情况能够使用操作无效化（不影响灯的状态）；
  * 当 $n = 2$ 时，若 $k = 1$，能够取得「`11`/`10`/`01`」三种状态，当 $k = 2$ 时，能够取满「`11`/`10`/`01`/`00`」四种状态，其余更大 $k$ 可以通过前 $k - 1$ 步归结到任一状态，再通过最后一次的操作 $1$ 归结到任意状态；
  * 当 $n = 3$ 时，若 $k = 1$ 时，对应 $4$ 种操作可取得 $4$ 种方案；当 $k = 2$ 时，可取得 $7$ 种状态；而当 $k = 3$ 时可取满 $2^3 = 8$ 种状态，更大的 $k$ 值可通过同样的方式归结到取满的 $8$ 种状态。
  * 当 $n > 3$ 时，根据四类操作可知，灯泡每 $6$ 组一循环（对应序列 `k + 1`、`2k + 2`、`2k + 1` 和 `3k + 1`），即只需考虑 $n <= 6$ 的情况，而 $n = 4$、$n = 5$ 和 $n = 6$ 时，后引入的灯泡状态均不会产生新的组合（即新引入的灯泡状态由前三个灯泡的状态所唯一确定），因此均可归纳到 $n = 3$ 的情况。

代码：

* []

```Java
class Solution {
    public int flipLights(int n, int k) {
        if (k == 0) return 1;
        if (n == 1) return 2;
        else if (n == 2) return k == 1 ? 3 : 4;
        else return k == 1 ? 4 : k == 2 ? 7 : 8;
    }
}
```

* []

```TypeScript
function flipLights(n: number, k: number): number {
    if (k == 0) return 1
    if (n == 1) return 2
    else if (n == 2) return k == 1 ? 3 : 4;
    else return k == 1 ? 4 : k == 2 ? 7 : 8;
};
```

* []

```Python
class Solution:
    def flipLights(self, n: int, k: int) -> int:
        if k == 0:
            return 1
        if n == 1:
            return 2
        elif n == 2:
            return 3 if k == 1 else 4
        else:
            return 4 if k == 1 else 7 if k == 2 else 8
```

* 时间复杂度：$O(1)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
