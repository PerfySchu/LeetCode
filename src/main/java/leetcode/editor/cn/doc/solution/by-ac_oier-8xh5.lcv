## 二分 + 双指针

容易想到先通过「二分」找到与 `x` 差值最小的位置 `idx`，然后从 `idx` 开始使用「双指针」往两边进行拓展（初始化左端点 $i = idx - 1$，右端点 $j = idx + 1$），含义为 $[i + 1, j - 1]$ 范围内子数组为候选区间，不断根据两边界与 `x` 的差值关系进行扩充，直到候选区间包含 $k$ 个数。

代码：

* []

```Java
class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        int n = arr.length, l = 0, r = n - 1;
        while (l < r) {
            int mid = l + r + 1 >> 1;
            if (arr[mid] <= x) l = mid;
            else r = mid - 1;
        }
        r = r + 1 < n && Math.abs(arr[r + 1] - x) < Math.abs(arr[r] - x) ? r + 1 : r;
        int i = r - 1, j = r + 1;
        while (j - i - 1 < k) {
            if (i >= 0 && j < n) {
                if (Math.abs(arr[j] - x) < Math.abs(arr[i] - x)) j++;
                else i--;
            } else if (i >= 0) {
                i--;
            } else {
                j++;
            }
        }
        List<Integer> ans = new ArrayList<>();
        for (int p = i + 1; p <= j - 1; p++) ans.add(arr[p]);
        return ans;
    }
}
```

* []

```TypeScript
function findClosestElements(arr: number[], k: number, x: number): number[] {
    let n = arr.length, l = 0, r = n - 1
    while (l < r) {
        const mid = l + r + 1 >> 1
        if (arr[mid] <= x) l = mid
        else r = mid - 1
    }
    r = r + 1 < n && Math.abs(arr[r + 1] - x) < Math.abs(arr[r] - x) ? r + 1 : r
    let i = r - 1, j = r + 1
    while (j - i - 1 < k) {
        if (i >= 0 && j < n) {
            if (Math.abs(arr[j] - x) < Math.abs(arr[i] - x)) j++
            else i--
        } else if (i >= 0) {
            i--
        } else {
            j++
        }
    }
    return arr.slice(i + 1, j);
};
```

* 时间复杂度：查找分割点复杂度为 $O(\log{n})$；从分割点往两边拓展复杂度为 $O(k)$。整体复杂度为 $O(\log{n} + k)$
* 空间复杂度：$O(1)$

---

## 加餐 & 加练

**加餐一道常规面试题 : [【面试高频题】难度 3.5/5，可进阶经典面试题（附进阶两问答案）
](https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247493134&idx=1&sn=cb9d4380b93bbe36591133a5ffb541de)**

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
