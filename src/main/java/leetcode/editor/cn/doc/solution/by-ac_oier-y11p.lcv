## 数据结构

创建一个长度为 $k$ 的数组充当循环队列，使用两个变量 `he` 和 `ta` 来充当队列头和队列尾（起始均为 $0$），整个过程 `he` 始终指向队列头部，`ta` 始终指向队列尾部的下一位置（待插入元素位置）。

两变量始终自增，通过与 $k$ 取模来确定实际位置。

分析各类操作的基本逻辑：
* `isEmpty` 操作：当 `he` 和 `ta` 相等，队列存入元素和取出元素的次数相同，此时队列为空；
* `isFull` 操作：`ta - he` 即队列元素个数，当元素个数为 $k$ 个时，队列已满；
* `enQueue` 操作：若队列已满，返回 $-1$，否则在 `nums[ta % k]` 位置存入目标值，并将 `ta` 指针后移；
* `deQueue` 操作：若队列为空，返回 $-1$，否则将 `he` 指针后移，含义为弹出队列头部元素；
* `Front` 操作：若队列为空，返回 $-1$，否则返回 `nums[he % k]` 队头元素；
* `Rear` 操作：若队列为空，返回 $-1$，否则返回 `nums[(ta - 1) % k]` 队尾元素；

代码：

* []

```Java
class MyCircularQueue {
    int k, he, ta;
    int[] nums;
    public MyCircularQueue(int _k) {
        k = _k;
        nums = new int[k];
    }
    public boolean enQueue(int value) {
        if (isFull()) return false;
        nums[ta % k] = value;
        return ++ta >= 0;
    }
    public boolean deQueue() {
        if (isEmpty()) return false;
        return ++he >= 0;
    }
    public int Front() {
        return isEmpty() ? -1 : nums[he % k];
    }
    public int Rear() {
        return isEmpty() ? -1 : nums[(ta - 1) % k];
    }
    public boolean isEmpty() {
        return he == ta;
    }
    public boolean isFull() {
        return ta - he == k;
    }
}
```

* []

```TypeScript
class MyCircularQueue {
    k: number = 0; he: number = 0; ta: number = 0;
    nums: number[];
    constructor(k: number) {
        this.k = k
        this.nums = new Array<number>(this.k)
    }
    enQueue(value: number): boolean {
        if (this.isFull()) return false
        this.nums[this.ta % this.k] = value
        return this.ta++ >= 0
    }
    deQueue(): boolean {
        if (this.isEmpty()) return false
        return this.he++ >= 0
    }
    Front(): number {
        return this.isEmpty() ? -1 : this.nums[this.he % this.k]
    }
    Rear(): number {
        return this.isEmpty() ? -1 : this.nums[(this.ta - 1) % this.k]
    }
    isEmpty(): boolean {
        return this.he == this.ta
    }
    isFull(): boolean {
        return this.ta - this.he == this.k
    }
}
```

* 时间复杂度：构造函数复杂度为 $O(k)$，其余操作复杂度为 $O(1)$
* 空间复杂度：$O(k)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
