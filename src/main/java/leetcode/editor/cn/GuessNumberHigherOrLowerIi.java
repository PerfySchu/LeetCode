//2021-11-12 09:59:43
//第375题
//我们正在玩一个猜数游戏，游戏规则如下： 
//
// 
// 我从 1 到 n 之间选择一个数字。 
// 你来猜我选了哪个数字。 
// 如果你猜到正确的数字，就会 赢得游戏 。 
// 如果你猜错了，那么我会告诉你，我选的数字比你的 更大或者更小 ，并且你需要继续猜数。 
// 每当你猜了数字 x 并且猜错了的时候，你需要支付金额为 x 的现金。如果你花光了钱，就会 输掉游戏 。 
// 
//
// 给你一个特定的数字 n ，返回能够 确保你获胜 的最小现金数，不管我选择那个数字 。 
//
// 
//
// 示例 1： 
//
// 
//输入：n = 10
//输出：16
//解释：制胜策略如下：
//- 数字范围是 [1,10] 。你先猜测数字为 7 。
//    - 如果这是我选中的数字，你的总费用为 $0 。否则，你需要支付 $7 。
//    - 如果我的数字更大，则下一步需要猜测的数字范围是 [8,10] 。你可以猜测数字为 9 。
//        - 如果这是我选中的数字，你的总费用为 $7 。否则，你需要支付 $9 。
//        - 如果我的数字更大，那么这个数字一定是 10 。你猜测数字为 10 并赢得游戏，总费用为 $7 + $9 = $16 。
//        - 如果我的数字更小，那么这个数字一定是 8 。你猜测数字为 8 并赢得游戏，总费用为 $7 + $9 = $16 。
//    - 如果我的数字更小，则下一步需要猜测的数字范围是 [1,6] 。你可以猜测数字为 3 。
//        - 如果这是我选中的数字，你的总费用为 $7 。否则，你需要支付 $3 。
//        - 如果我的数字更大，则下一步需要猜测的数字范围是 [4,6] 。你可以猜测数字为 5 。
//            - 如果这是我选中的数字，你的总费用为 $7 + $3 = $10 。否则，你需要支付 $5 。
//            - 如果我的数字更大，那么这个数字一定是 6 。你猜测数字为 6 并赢得游戏，总费用为 $7 + $3 + $5 = $15 。
//            - 如果我的数字更小，那么这个数字一定是 4 。你猜测数字为 4 并赢得游戏，总费用为 $7 + $3 + $5 = $15 。
//        - 如果我的数字更小，则下一步需要猜测的数字范围是 [1,2] 。你可以猜测数字为 1 。
//            - 如果这是我选中的数字，你的总费用为 $7 + $3 = $10 。否则，你需要支付 $1 。
//            - 如果我的数字更大，那么这个数字一定是 2 。你猜测数字为 2 并赢得游戏，总费用为 $7 + $3 + $1 = $11 。
//在最糟糕的情况下，你需要支付 $16 。因此，你只需要 $16 就可以确保自己赢得游戏。
// 
//
// 示例 2： 
//
// 
//输入：n = 1
//输出：0
//解释：只有一个可能的数字，所以你可以直接猜 1 并赢得游戏，无需支付任何费用。
// 
//
// 示例 3： 
//
// 
//输入：n = 2
//输出：1
//解释：有两个可能的数字 1 和 2 。
//- 你可以先猜 1 。
//    - 如果这是我选中的数字，你的总费用为 $0 。否则，你需要支付 $1 。
//    - 如果我的数字更大，那么这个数字一定是 2 。你猜测数字为 2 并赢得游戏，总费用为 $1 。
//最糟糕的情况下，你需要支付 $1 。
// 
//
// 
//
// 提示： 
//
// 
// 1 <= n <= 200 
// 
// Related Topics 数学 动态规划 博弈 👍 330 👎 0
// 状态转移方程
// f(i,j) 表示 i 到 j 范围内确保胜利的最小金额，本题需求解 f(1, n)
// 对于任意一次猜测 f(i, j)，设当前猜测数字 x, 则有如下三种情况：
//      1. 恰好猜中，花费 0
//      2. x 小于目标数， 花费 x, 继续下一轮猜测 f(x+1, j)
//      3. x 大于目标数， 花费 x, 继续下一轮猜测 f(i, x-1)
//  为了保证胜利，应考虑当前猜测最坏情况，则有  f(i, j) = x + Max(f(i, x-1), f(x+1, j))
//
// 为了得到确保胜利的最小金额，则要保证每次猜测时，x是当前区间的最优解 k
// 因此当前区间最小金额（确保胜利） f(i, j) = min {k + Max(f(i, k-1), f(k+1, j))}
//      其中 k 的取值范围是 [i,j]
//

package leetcode.editor.cn;
public class GuessNumberHigherOrLowerIi{
    public static void main(String[] args){
        Solution solution = new GuessNumberHigherOrLowerIi().new Solution();
        System.out.println(solution.getMoneyAmount(10));
    }
    //leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int getMoneyAmount(int n) {
        int[][] f = new int[n+1][n+1];
        for (int i = n-1; i >= 1; i--) {
            for (int j = i+1; j <= n; j++) {
                int minCost = Integer.MAX_VALUE;
                for (int k = i; k < j; k++) {
                    int cost = k + Math.max(f[i][k-1], f[k+1][j]);
                    minCost = Math.min(minCost, cost);
                }
                f[i][j] = minCost;
            }
        }
        return f[1][n];
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}
